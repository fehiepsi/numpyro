# Copyright Contributors to the Pyro project.
# SPDX-License-Identifier: Apache-2.0

import glob
import hashlib
import os
import re
import shutil
import sys

from sphinx_gallery.scrapers import figure_rst
from sphinx_gallery.sorting import FileNameSortKey
import sphinx_rtd_theme


# import pkg_resources

# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
sys.path.insert(0, os.path.abspath('../..'))


os.environ['SPHINX_BUILD'] = '1'

# HACK: This is to ensure that local functions are documented by sphinx.
from numpyro.infer.hmc import hmc  # noqa: E402
hmc(None, None)

# -- Project information -----------------------------------------------------

project = u'NumPyro'
copyright = u'2019, Uber Technologies, Inc'
author = u'Uber AI Labs'

version = ''

if 'READTHEDOCS' not in os.environ:
    # if developing locally, use pyro.__version__ as version
    from numpyro import __version__  # noqaE402
    version = __version__

# release version
release = version


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'nbsphinx',
    'recommonmark',
    'sphinx.ext.autodoc',
    'sphinx.ext.doctest',
    'sphinx.ext.intersphinx',
    'sphinx.ext.mathjax',
    'sphinx.ext.viewcode',
    'sphinx_gallery.gen_gallery',
]

# Enable documentation inheritance

autodoc_inherit_docstrings = True

# autodoc_default_options = {
#     'member-order': 'bysource',
#     'show-inheritance': True,
#     'special-members': True,
#     'undoc-members': True,
#     'exclude-members': '__dict__,__module__,__weakref__',
# }

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ['.rst', '.md', '.ipynb']

# do not execute cells
nbsphinx_execute = 'never'

# allow errors because not all tutorials build
# nbsphinx_allow_errors = True

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = ['.ipynb_checkpoints', 'logistic_regression.ipynb',
                    'examples/*ipynb', 'examples/*py']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'


# do not prepend module name to functions
add_module_names = False


# copy README files

with open('../../README.md', 'rt') as f:
    lines = f.readlines()
    for i, line in enumerate(lines):
        if "# NumPyro" == line.rstrip():
            break
    lines = lines[i:]
    lines[0] = "# Getting Started with NumPyro\n"

with open('README.md', 'wt') as f:
    f.writelines(lines)


# copy notebook files

if not os.path.exists('tutorials'):
    os.makedirs('tutorials')

# remove files that are updated or not available in notebooks/source
for dest_file in glob.glob('tutorials/*.ipynb'):
    src_file = os.path.join('../../notebooks/source', dest_file.split("/")[-1])
    if ((not os.path.exists(src_file)) or
            (any(re.search(p, src_file) is not None for p in exclude_patterns))):
        os.remove(dest_file)
        continue
    with open(src_file, 'rb') as f:
        src_md5sum = hashlib.md5(f.read()).hexdigest()
    with open(dest_file, 'rb') as f:
        dest_md5sum = hashlib.md5(f.read()).hexdigest()
    if src_md5sum != dest_md5sum:
        os.remove(dest_file)

for src_file in glob.glob('../../notebooks/source/*.ipynb'):
    # skip files in exclude_patterns
    if any(re.search(p, src_file) is not None for p in exclude_patterns):
        continue
    dest_file = os.path.join('tutorials', src_file.split("/")[-1])
    if not os.path.exists(dest_file):
        shutil.copy(src_file, 'tutorials')


# This is processed by Jinja2 and inserted before each notebook
nbsphinx_prolog = r"""
{% set docname = 'notebooks/source/' + env.doc2path(env.docname, base=None) %}

.. raw:: html

    <div class="admonition note">
      Interactive online version:
      <span style="white-space: nowrap;">
        <a href="https://colab.research.google.com/github/google/jax/blob/master/{{ docname }}">
          <img alt="Open In Colab" src="https://colab.research.google.com/assets/colab-badge.svg"
            style="vertical-align:text-bottom">
        </a>
      </span>
    </div>
"""


# Examples Gallery

# examples with order
EXAMPLES = [
   'baseball.py',
   'bnn.py',
   'funnel.py',
   'gp.py',
   'ucbadmit.py',
   'hmm.py',
   'hmm_enum.py',
   'neutra.py',
   'ode.py',
   'sparse_regression.py',
   'stochastic_volatility.py',
   'vae.py',
]


class GalleryFileNameSortKey(FileNameSortKey):
    def __call__(self, filename):
        if filename in EXAMPLES:
            return "{:02d}".format(EXAMPLES.index(filename))
        else:  # not in examples list, sort by name
            return "99" + filename


# Adapted from https://sphinx-gallery.github.io/stable/advanced.html#example-2-detecting-image-files-on-disk
#
# Custom images can be put in _static/img folder, with the pattern
#   sphx_glr_[name_of_example]_1.png
# Note that this also displays the image in the example page.
# To not display the image, we can add the following lines
# at the end of __call__ method:
#   if "sparse_regression" in images_rst:
#       images_rst = ""
#   return images_rst
#
# If there are several images for an example, we can select
# which one to be the thumbnail image by adding a comment
# in the example script
#   # sphinx_gallery_thumbnail_number = 2
class PNGScraper(object):
    def __init__(self):
        self.seen = set()

    def __repr__(self):
        return 'PNGScraper'

    def __call__(self, block, block_vars, gallery_conf):
        # Find all PNG files in the directory of this example.
        pngs = sorted(glob.glob(os.path.join(os.path.dirname(__file__), '_static/img/sphx_glr_*.png')))

        # Iterate through PNGs, copy them to the sphinx-gallery output directory
        image_names = list()
        image_path_iterator = block_vars['image_path_iterator']
        for png in pngs:
            if png not in self.seen:
                self.seen |= set(png)
                this_image_path = image_path_iterator.next()
                image_names.append(this_image_path)
                shutil.copy(png, this_image_path)
        # Use the `figure_rst` helper function to generate rST for image files
        images_rst = figure_rst(image_names, gallery_conf['src_dir'])
        return images_rst


sphinx_gallery_conf = {
    'examples_dirs': ['../../examples', '../../notebooks/source/'],
    'gallery_dirs': ['examples', 'tutorials'],
    # only execute the examples with the following patterns
    # (skip all to make readthedocs render faster)
    'filename_pattern': '/plot_',
    # skip rendering files with the following patterns
    'ignore_pattern': '(conf|minipyro|covtype|__init__)',
    'within_subsection_order': GalleryFileNameSortKey,
    'image_scrapers': ('matplotlib', PNGScraper()),
    'default_thumb_file': 'source/_static/img/pyro_logo_wide.png',
}


# -- Options for HTML output -------------------------------------------------

# logo
html_logo = '_static/img/pyro_logo_wide.png'

# logo
html_favicon = '_static/img/favicon/favicon.ico'

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "sphinx_rtd_theme"
html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']
html_style = 'css/pyro.css'

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'numpyrodoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'NumPyro.tex', u'NumPyro Documentation', u'Uber AI Labs', 'manual'),
]

# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'NumPyro', u'NumPyro Documentation',
     [author], 1)
]

# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'NumPyro', u'NumPyro Documentation',
     author, 'NumPyro', 'Pyro PPL on Numpy',
     'Miscellaneous'),
]


# -- Extension configuration -------------------------------------------------

# -- Options for intersphinx extension ---------------------------------------

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {
    'python': ('https://docs.python.org/3/', None),
    'numpy': ('http://docs.scipy.org/doc/numpy/', None),
    'jax': ('https://jax.readthedocs.io/en/latest/', None),
    'pyro': ('http://docs.pyro.ai/en/stable/', None),
}
